
@inherits OwningComponentBase

<p class="small">Группы</p>
@if (Groups == null)
{
    <div class="small spinner-grow"></div>
}
else
{
    @if (!Editable)
    {
        <ul class="list-unstyled">
            @foreach (var elem in Groups)
            {
                <li class="small text-info">@elem.Name | @elem.CourseNumber курс</li>
            }
        </ul>
    }
    else
    {
        @if (!AddingMode)
        {
            <ul class="list-unstyled">
                @foreach (var elem in Groups)
                {
                <li class="small text-info">
                    @elem.Name | @elem.StartEducationDate.ToShortDateString()-@elem.EndEducationDate.ToShortDateString() | Курс:@elem.CourseNumber
                    <button class="btn btn-link" @onclick="@(async () => await Edit(elem.Id))">Изменить</button>
                    <button class="btn btn-link" @onclick="@(async ()=> await Delete(elem.Id))">Удалить</button>
                </li>
                        @if (Group != null && Group.Id == elem.Id)
                        {
                            <div class="col-12 form-group ">
                                <EditForm Model="@EditGroup">
                                    <DataAnnotationsValidator />
                                    <ValidationSummary />
                                    <div class="form-group">
                                        <InputLabel TItem="Cathedra" aspfor="@nameof(Cathedra.Name)" />
                                        <InputSelectInt class="dropdown form-control" @bind-Value="SelectedCathedra">
                                            @foreach (var cath in Cathedras)
                                                                {
                                                <option value="@cath.Id">@cath.Name</option>
                                                                }
                                        </InputSelectInt>
                                    </div>
                                    <div class="form-group">
                                        <InputLabel TItem="Group" aspfor="@nameof(EditGroup.Name)"></InputLabel>
                                        <InputText class="form-control" id="nameEd" @bind-Value="EditGroup.Name" />
                                    </div>
                                    <div class="form-group">
                                        <InputLabel TItem="Group" aspfor="@nameof(EditGroup.CourseNumber)"></InputLabel>
                                        <InputNumber class="form-control" id="courseEd" @bind-Value="EditGroup.CourseNumber" />
                                    </div>
                                    <div class="form-group">
                                        <InputLabel TItem="Group" aspfor="@nameof(EditGroup.StartEducationDate)"></InputLabel>
                                        <InputDate class="form-control" id="StartDateEd" @bind-Value="EditGroup.StartEducationDate" />
                                    </div>
                                    <div class="form-group">
                                        <InputLabel TItem="Group" aspfor="@nameof(EditGroup.EndEducationDate)"></InputLabel>
                                        <InputDate class="form-control" id="EndDateEd" @bind-Value="EditGroup.EndEducationDate" />
                                    </div>
                                    <div class="form-group">
                                        <button type="submit" class="btn btn-success" @onclick="ValidateUpdating">Сохранить</button>
                                        <button type="button" class="btn btn-danger" @onclick="@(async ()=> await Edit(elem.Id))">Не сохранять</button>
                                    </div>
                                </EditForm>
                            </div>
                        }

                }
            </ul>


            <button type="button" class="btn btn-primary" @onclick="@(() => { AddingMode = !AddingMode; StateHasChanged(); })">Добавить группу к кафедре</button>
        }
        else
        {
            <div class="col-12 form-group">
                <EditForm Model="@AddGroup">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group">
                        <InputLabel TItem="Group" aspfor="@nameof(AddGroup.Name)"></InputLabel>
                        <InputText class="form-control" id="nameadd" @bind-Value="AddGroup.Name" />
                    </div>
                    <div class="form-group">
                        <InputLabel TItem="Group" aspfor="@nameof(AddGroup.CourseNumber)"></InputLabel>
                        <InputNumber class="form-control" id="courseadd" @bind-Value="AddGroup.CourseNumber" />
                    </div>
                    <div class="form-group">
                        <InputLabel TItem="Group" aspfor="@nameof(AddGroup.StartEducationDate)"></InputLabel>
                        <InputDate class="form-control" id="startDateAdd" @bind-Value="AddGroup.StartEducationDate" />
                    </div>
                    <div class="form-group">
                        <InputLabel TItem="Group" aspfor="@nameof(AddGroup.EndEducationDate)"></InputLabel>
                        <InputDate class="form-control" id="endDateAdd" @bind-Value="AddGroup.EndEducationDate" />
                    </div>
                    <div class="form-group">
                        <button type="submit" class="btn btn-success" @onclick="ValidateAdd">Добавить</button>
                        <button type="button" class="btn btn-danger" @onclick="@(() => { AddingMode = !AddingMode; StateHasChanged(); })"> Закрыть форму добавления</button>
                    </div>
                </EditForm>
            </div>

        }
    }
}






@code {
    public StudentsEducation.Domain.Interfaces.ICathedrasAndGroupsService service;
    [Parameter]
    public int CathedraId { get; set; }
    [Parameter]
    public bool Editable { get; set; }
    public bool AddingMode { get; set; }
    public IEnumerable<Cathedra> Cathedras { get; set; }
    public Group AddGroup = new Group();
    public Group EditGroup = new Group();
    public IEnumerable<Group> Groups { get; set; }
    public Group Group { get; set; }
    public int EditId { get; set; }

    public int SelectedCathedra { get; set; }
    public bool Ready { get; set; }
    public EditContext context;

    protected override void OnInitialized()
    {
        service = ScopedServices.GetRequiredService<StudentsEducation.Domain.Interfaces.ICathedrasAndGroupsService>();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        Groups = await service.GetCatherdaGroupsAsync(CathedraId);
        if (Cathedras == null) Cathedras = await service.GetCathedrasAsync();
        StateHasChanged();
    }
    public async Task Edit(int id)
    {
        Groups = Groups.Where(e => e.Cathedra.Id == CathedraId);
        if (Cathedras == null) Cathedras = await service.GetCathedrasAsync();
        if (Group != null && Group.Id == id)
        {
            Group = null;
            EditGroup = new Group();
            SelectedCathedra = CathedraId;
        }
        else
        {
            //TODO: Would be a problem one day!!!
            Group = Groups.First(e => e.Id == id);
            EditGroup.Name = Group.Name;
            EditGroup.StartEducationDate = Group.StartEducationDate;
            EditGroup.EndEducationDate = Group.EndEducationDate;
            EditGroup.CourseNumber = Group.CourseNumber;
            EditGroup.Cathedra = Group.Cathedra;
            SelectedCathedra = CathedraId;
        }
        StateHasChanged();
    }

    public async Task ValidateUpdating()
    {
        context = new EditContext(EditGroup);
        context.AddDataAnnotationsValidation();
        if (CathedraId != SelectedCathedra && SelectedCathedra != 0)
        {
            Group.Cathedra = Cathedras.First(e => e.Id == SelectedCathedra);
        }
        if (context.Validate())
        {
            try
            {
                Group.CourseNumber = EditGroup.CourseNumber;
                Group.Name = EditGroup.Name;
                Group.StartEducationDate = EditGroup.StartEducationDate;
                Group.EndEducationDate = EditGroup.EndEducationDate;
                await service.UpdateGroupAsync(Group);
                await Edit(Group.Id);
            }
            catch (System.Data.DBConcurrencyException)
            {

            }
        }
        StateHasChanged();
    }
    public async Task ValidateAdd()
    {
        context = new EditContext(AddGroup);
        AddGroup.Cathedra = await service.GetCathedraByIdAsync(CathedraId);
        context.AddDataAnnotationsValidation();
        if (context.Validate())
        {
            try
            {
                await service.AddGroupToCathedraAsync(CathedraId, AddGroup);
                AddingMode = !AddingMode;
                AddGroup = new Group();
            }
            catch (System.Data.DBConcurrencyException e)
            {

            }
        }
    }
    public async Task Delete(int id)
    {
        if (await service.GetGroupAsync(id) != null)
        {
            await service.DeleteGroupAsync(id);
        }
    }
}
