@using Microsoft.Extensions.DependencyInjection
@using StudentsEducation.Domain.Entities
@inherits OwningComponentBase

<p class="small">Работы</p>
@if (Works == null)
{
    <div class="small spinner-grow"></div>
}
else
{
    @if (!Editable)
    {
<ul class="list-unstyled">
    @foreach (var elem in Works.OrderBy(e=>e.WorkNumber))
    {
    <li class="small text-info">@elem.Name | @elem.ControlType.ControlName</li>
    }
</ul>
    }
    else
    {
        @if (!AddingMode)
        {
<ul class="list-unstyled">
    @foreach (var elem in Works.OrderBy(e=>e.WorkNumber))
    {
        <li class="small text-info">
            @elem.Name | @elem.ControlType.ControlName
            <button class="btn btn-link" @onclick="@(async () => await Edit(elem.Id))">Изменить</button>
            <button class="btn btn-link" @onclick="@(async () => await Delete(elem.Id))">Удалить</button>
        </li>
        @if (Work != null && Work.Id == elem.Id)
        {
<EditForm Model="@EditWork">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <InputLabel TItem="ControlType" aspfor="@nameof(ControlType.ControlName)" />
        <InputSelectInt class="dropdown form-control" @bind-Value="SelectedControlId">
            @foreach (var cType in ControlTypes)
                                {
                <option value="@cType.Id">@cType.ControlName</option>
                                }
            /**/
            /**/
            /**/
            /**/
            /**/

        </InputSelectInt>
    </div>
    <div class="form-group">
        <InputLabel TItem="Subject" aspfor="@nameof(Subject.Name)" />
        <InputSelectInt class="dropdown form-control" @bind-Value="SelectedSubjectId">
            @foreach (var sbj in Subjects)
                                {
                <option value="@sbj.Id">@sbj.Name</option>
                                }
            /**/
            /**/
            /**/
            /**/
            /**/

        </InputSelectInt>
    </div>
    <div class="form-group">
        <InputLabel TItem="Work" aspfor="@nameof(EditWork.WorkNumber)"></InputLabel>
        <InputNumber class="form-control" id="nameNum" @bind-Value="EditWork.WorkNumber" />
    </div>
    <div class="form-group">
        <InputLabel TItem="Work" aspfor="@nameof(EditWork.Name)"></InputLabel>
        <InputText class="form-control" id="nameEd" @bind-Value="EditWork.Name" />
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-success" @onclick="ValidateUpdating">Сохранить</button>
        <button type="button" class="btn btn-danger" @onclick="@(async () => await Edit(elem.Id))">Не сохранять</button>
    </div>
</EditForm>
        }
    }
</ul>
            <button type="button" class="btn btn-primary" @onclick="@(() => { AddingMode = !AddingMode; StateHasChanged(); })">Добавить работу к предмету</button>
        }
        else
        {
            <div class="col-12 form-group">
                <EditForm Model="@AddWork">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group">
                        <InputLabel TItem="ControlType" aspfor="@nameof(ControlType.ControlName)" />
                        <InputSelectInt class="dropdown form-control" @bind-Value="SelectedControlId">
                            @foreach (var cType in ControlTypes)
                                        {
                                <option value="@cType.Id">@cType.ControlName</option>
                                        }
                            /**/
                            /**/
                            /**/

                        </InputSelectInt>
                    </div>
                    <div class="form-group">
                        <InputLabel TItem="Work" aspfor="@nameof(AddWork.Name)"></InputLabel>
                        <InputText class="form-control" id="courseadd" @bind-Value="AddWork.Name" />
                    </div>
                    <div class="form-group">
                        <InputLabel TItem="Work" aspfor="@nameof(AddWork.WorkNumber)"></InputLabel>
                        <InputNumber class="form-control" id="nameNum" @bind-Value="AddWork.WorkNumber" />
                    </div>
                    <div class="form-group">
                        <button type="submit" class="btn btn-success" @onclick="ValidateAdd">Добавить</button>
                        <button type="button" class="btn btn-danger" @onclick="@(() => { AddingMode = !AddingMode; StateHasChanged(); })"> Закрыть форму добавления</button>
                    </div>
                </EditForm>
            </div>

        }

    }
}






@code {
    public StudentsEducation.Domain.Interfaces.ISubjectAndWorksService service;
    public StudentsEducation.Domain.Interfaces.IAsyncRepository<ControlType> typeRepository;
    [Parameter]
    public int SubjectId { get; set; }
    [Parameter]
    public bool Editable { get; set; }
    public bool AddingMode { get; set; }
    public IEnumerable<ControlType> ControlTypes { get; set; }
    public IEnumerable<Subject> Subjects { get; set; }
    public Work AddWork = new Work();
    public Work EditWork = new Work();
    public IEnumerable<Work> Works { get; set; }
    public Work Work { get; set; }
    public int EditId { get; set; }


    public int SelectedControlId{get;set;}
    public int SelectedSubjectId { get; set; }

    public EditContext context;

    protected override void OnInitialized()
    {
        service = ScopedServices.GetRequiredService<StudentsEducation.Domain.Interfaces.ISubjectAndWorksService>();
        typeRepository = ScopedServices.GetRequiredService<StudentsEducation.Domain.Interfaces.IAsyncRepository<ControlType>>();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        Works = await service.GetWorksBySubjectAsync(SubjectId);
        if (Subjects == null) Subjects = await service.GetSubjectsAsync();
        if (ControlTypes == null) ControlTypes = await typeRepository.GetAllAsync();
        StateHasChanged();
    }
    public async Task Edit(int id)
    {
        Works = Works.Where(e => e.Subject.Id == SubjectId);

        if (Work != null && Work.Id == id)
        {
            Work = null;
            EditWork = new Work();
        }
        else
        {
            //TODO: Would be a problem one day!!!
            Work = Works.First(e => e.Id == id);
            EditWork.Name = Work.Name;
            EditWork.Subject = Work.Subject;
            EditWork.ControlType = Work.ControlType;
            EditWork.WorkNumber = Work.WorkNumber;
            SelectedControlId = Work.ControlType.Id;
            SelectedSubjectId = Work.Subject.Id;
        }
        StateHasChanged();
    }

    public async Task ValidateUpdating()
    {
        context = new EditContext(EditWork);
        context.AddDataAnnotationsValidation();
        if (Work.Subject.Id!=SelectedSubjectId)
        {
            EditWork.Subject = Subjects.First(e => e.Id == SelectedSubjectId);
        }
        if (Work.ControlType.Id!=SelectedControlId)
        {
            EditWork.ControlType = ControlTypes.First(e => e.Id == SelectedControlId);
        }
        if (context.Validate())
        {
            try
            {
                Work.Name = EditWork.Name;
                Work.Subject = EditWork.Subject;
                Work.ControlType = EditWork.ControlType;
                await service.UpdateWorkAsync(Work);
                await Edit(Work.Id);
                SelectedControlId = 0;
                SelectedSubjectId = 0;
            }
            catch (System.Data.DBConcurrencyException)
            {

            }
        }
        StateHasChanged();
    }
    public async Task ValidateAdd()
    {
        context = new EditContext(AddWork);
        AddWork.ControlType = ControlTypes.First(e => e.Id == SelectedControlId);
        AddWork.Subject = Subjects.First(e=>e.Id==SubjectId);
        context.AddDataAnnotationsValidation();
        if (context.Validate())
        {
            try
            {
                await service.AddWorkToSubjectAsync(AddWork, SubjectId);
                AddingMode = !AddingMode;
                SelectedControlId = 0;
                AddWork = new Work();
            }
            catch (System.Data.DBConcurrencyException e)
            {

            }
        }
    }
    public async Task Delete(int id)
    {
        await service.DeleteWorkAsync(id);
    }
}
